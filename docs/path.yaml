paths:
  /users/valid/{user_nickname}:
    get:
      tags:
        - users
      summary: Author:규민, 신규 이용자 닉네임 유효성 확인 - 중복체크
      description: Author:규민, true>가능, false>불가능
      parameters:
        - $ref: '#/components/parameters/user_nickname'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      result:
                        type: boolean
        '500':
          description: '`ServerInternalError`'
  /v2/users/login:
    get:
      tags:
        - users
      summary: Author:기호, 유저 user_id 조회 및 회원가입 여부 조회 및 디바이스 토큰 등록
      description: Author:기호, Response  `user`, user내에 정보가 없을 경우 회원가입 필요
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/Device'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        format: ObjectId
                      device_set:
                        type: boolean
                        description: 'true : 새로운 디바이스로 접속 및 토큰 등록됨 / false : 기존 디바이스으로 접속함'
        '404':
          description: '`ClientErrorNotFound` firebase 유저이지만 서버 유저목록에서 유저를 찾을 수 없는 경우'
        '400':
          description: '`ClientErrorBadRequest`'
  /v2/users/oauth/kakao:
    get:
      tags:
        - users
      summary: Author:규민, 파이어베이스 커스텀토큰 발급 및 파이어베이스 유저 등록
      description: Author:규민, Upsert user to Firebase, Response with `custom_token` signed by FitMate Firebase Project
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: User object to be added
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uid:
                  type: string
                displayName:
                  type: string
                email:
                  type: string
                  format: email
                photoURL:
                  type: string
                  format: URL
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: object
                    properties:
                      custom_token:
                        type: string
                        format: JWT
        '400':
          description: '`ClientErrorBadRequest`'
  /v2/users/oauth:
    post:
      tags:
        - users
      summary: Author:규민, 새로운 유저 등록
      description: Author:규민,Add new user to db with firebase token
      operationId: assignUser
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: User object to be added
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_nickname:
                  type: string
                user_address:
                  type: string
                  format: formatted address
                user_schedule_time:
                  type: integer
                  description: '0 : 오전, 1 : 오후, 2 : 저녁'
                user_introduce:
                  type: string
                  description: 소개
                user_weekday:
                  type: object
                  properties:
                    mon:
                      type: boolean
                    tue:
                      type: boolean
                    wed:
                      type: boolean
                    thu:
                      type: boolean
                    fri:
                      type: boolean
                    sat:
                      type: boolean
                    sun:
                      type: boolean
                user_gender:
                  type: boolean
                  format: 'true : male, false : female'
                user_longitude:
                  type: number
                  description: double in degrees
                user_latitude:
                  type: number
                  description: double in degrees
                fitness_center:
                  type: object
                  properties:
                    center_name:
                      type: string
                    center_address:
                      type: string
                    fitness_longitude:
                      type: number
                      description: double in degrees
                    fitness_latitude:
                      type: number
                      description: double in degrees
                device_token:
                  type: string
      responses:
        '201':
          description: '`SUCCESS CREATED` returns created user document'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/user'
        '400':
          description: '`Client Bad Request`'
  /v2/users:
    get:
      tags:
        - users
      summary: Author:규민, 모든 유저 목록 조회
      description: Author:규민,Response  `array of all user`
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'

        '400':
          description: '`ClientErrorBadRequest`'
    delete:
      tags:
        - users
      summary: Author:규민, 유저 회원탈퇴
      description: Author:규민, Response  `result of signed out user`, 사용자가 회원탈퇴하고 사용자와 관련된 Post, Chatroom, Review, Appointment 를 삭제합니다.
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: object
                    properties:
                      resultUser:
                        $ref: '#/components/schemas/user'
                      resultPost:
                        type: object
                        properties:
                          acknowledged:
                            type: boolean
                          modifiedCount:
                            type: number
                          upsertedId:
                            type: string
                          upsertedCount:
                            type: number
                          matchedCount:
                            type: number
                      resultChatroom:
                        type: object
                        properties:
                          acknowledged:
                            type: boolean
                          modifiedCount:
                            type: number
                          upsertedId:
                            type: string
                          upsertedCount:
                            type: number
                          matchedCount:
                            type: number
                      resultReview:
                        type: object
                        properties:
                          acknowledged:
                            type: boolean
                          modifiedCount:
                            type: number
                          upsertedId:
                            type: string
                          upsertedCount:
                            type: number
                          matchedCount:
                            type: number
                      resultAppointment:
                        type: object
                        properties:
                          acknowledged:
                            type: boolean
                          modifiedCount:
                            type: number
                          upsertedId:
                            type: string
                          upsertedCount:
                            type: number
                          matchedCount:
                            type: number
        '400':
          description: '`ClientErrorBadRequest`'
  /v2/users/{userId}:
    get:
      tags:
        - users
      summary: Author:규민, userID로 사용자 1명 조회
      description: Author:규민,Returns a single user
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: '`SUCCESS_OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/user'
        '400':
          description: ClientErrorBadRequest
    patch:
      tags:
        - users
      summary: Author:규민,사용자 정보 변경
      description: update user information
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/userId'
      requestBody:
        description: User object to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: '`SUCCESS_OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/user'
        '400':
          description: ClientErrorBadRequest
  /v2/users/image:
    post:
      tags:
        - users
      summary: Author:규민, 사용자 프로필 이미지 등록
      description: Author:규민,토큰에 해당하는 사용자의 사진을 등록/변경합니다. `AWS-s3 URL of image stored`
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # 'file' will be the field name in this multipart request
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: string
                    format: s3 URL
        '400':
          description: '`ClientErrorBadRequest`'

  /v1/users/login:
    get:
      tags:
        - users
      summary: Author:규민, 유저 user_id 조회 및 회원가입 여부 조회 및 디바이스 토큰 등록
      description: Author:규민, Response  `user_id`
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/Device'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: object
                    properties:
                      user_id:
                        type: string
                        format: ObjectId
                      device_set:
                        type: boolean
                        description: 'true : 새로운 디바이스로 접속 및 토큰 등록됨 / false : 기존 디바이스으로 접속함'
        '404':
          description: '`ClientErrorNotFound` firebase 유저이지만 서버 유저목록에서 유저를 찾을 수 없는 경우'
        '400':
          description: '`ClientErrorBadRequest`'
  /v1/users/oauth:
    post:
      tags:
        - users
      summary: Author:규민, 새로운 유저 등록
      description: Author:규민,Add new user to db with firebase token
      operationId: assignUser
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: User object to be added
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_nickname:
                  type: string
                user_address:
                  type: string
                  format: formatted address
                user_schedule_time:
                  type: integer
                  description: '0 : 오전, 1 : 오후, 2 : 저녁'
                user_weekday:
                  type: object
                  default: false
                  properties:
                    mon:
                      type: boolean
                    tue:
                      type: boolean
                    wed:
                      type: boolean
                    thu:
                      type: boolean
                    fri:
                      type: boolean
                    sat:
                      type: boolean
                    sun:
                      type: boolean
                user_gender:
                  type: boolean
                  format: 'true : male, false : female'
                user_longitude:
                  type: number
                  description: double in degrees
                user_latitude:
                  type: number
                  description: double in degrees
                fitness_center:
                  type: object
                  properties:
                    center_name:
                      type: string
                    center_address:
                      type: string
                    fitness_longitude:
                      type: number
                      description: double in degrees
                    fitness_latitude:
                      type: number
                      description: double in degrees
                device_token:
                  type: string
      responses:
        '201':
          description: '`SUCCESS CREATED` returns created user document'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/user'
        '400':
          description: '`Client Bad Request`'
  /v1/users:
    get:
      tags:
        - users
      summary: Author:규민, 모든 유저 목록 조회
      description: Author:규민,Response  `array of all user`
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'

        '400':
          description: '`ClientErrorBadRequest`'
    delete:
      tags:
        - users
      summary: Author:규민, 유저 회원탈퇴
      description: Author:규민, Response  `result of signed out user`, 사용자가 회원탈퇴하고 사용자와 관련된 Post, Chatroom, Review, Appointment 를 삭제합니다.
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: object
                    properties:
                      resultUser:
                        $ref: '#/components/schemas/user'
                      resultPost:
                        type: object
                        properties:
                          acknowledged:
                            type: boolean
                          modifiedCount:
                            type: number
                          upsertedId:
                            type: string
                          upsertedCount:
                            type: number
                          matchedCount:
                            type: number
                      resultChatroom:
                        type: object
                        properties:
                          acknowledged:
                            type: boolean
                          modifiedCount:
                            type: number
                          upsertedId:
                            type: string
                          upsertedCount:
                            type: number
                          matchedCount:
                            type: number
                      resultReview:
                        type: object
                        properties:
                          acknowledged:
                            type: boolean
                          modifiedCount:
                            type: number
                          upsertedId:
                            type: string
                          upsertedCount:
                            type: number
                          matchedCount:
                            type: number
                      resultAppointment:
                        type: object
                        properties:
                          acknowledged:
                            type: boolean
                          modifiedCount:
                            type: number
                          upsertedId:
                            type: string
                          upsertedCount:
                            type: number
                          matchedCount:
                            type: number
        '400':
          description: '`ClientErrorBadRequest`'
  /v1/users/{userId}:
    get:
      tags:
        - users
      summary: Author:규민, userID로 사용자 1명 조회
      description: Author:규민,Returns a single user
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: '`SUCCESS_OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/user'
        '400':
          description: ClientErrorBadRequest
    patch:
      tags:
        - users
      summary: Author:규민,사용자 정보 변경
      description: update user information
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/userId'
      requestBody:
        description: User object to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: '`SUCCESS_OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/user'
        '400':
          description: ClientErrorBadRequest
  /v1/users/image:
    post:
      tags:
        - users
      summary: Author:규민, 사용자 프로필 이미지 등록
      description: Author:규민,토큰에 해당하는 사용자의 사진을 등록/변경합니다. `AWS-s3 URL of image stored`
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # 'file' will be the field name in this multipart request
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: string
                    format: s3 URL
        '400':
          description: '`ClientErrorBadRequest`'

  /v2/posts:
    get:
      tags:
        - posts
      summary: Author:기호, 모든 매칭글 목록 조회 - Pagination 구현(page=2)
      description: Author:규민,Response  `array of posts written by user`
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/post'
        '400':
          description: '`ClientErrorBadRequest`'
    post:
      tags:
        - posts
      summary: Author:규민,매칭글 등록
      description: Assign a  `post`
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: Post object to be posted
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: ObjectId
                  description: references user
                location_id:
                  type: string
                  format: ObjectId
                  description: references location
                post_fitness_part:
                  type: array
                  items:
                    type: string
                    format: Objectid
                    description: references fitness part
                post_title:
                  type: string
                promise_location:
                  type: object
                  properties:
                    center_name:
                      type: string
                    center_address:
                      type: string
                    center_longitude:
                      type: number
                    center_latitude:
                      type: number
                promise_date:
                  type: string
                  format: date
                post_img:
                  type: string
                  default: ''
                post_main_text:
                  type: string
                  default: ''
      responses:
        '201':
          description: '`SuccessCreated`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/post'
        '400':
          description: '`ClientErrorBadRequest`'
  /v2/posts/{postId}:
    get:
      tags:
        - posts
      summary: Author:규민, postId로 매칭글 조회
      description: Author:규민,Returns a single post
      operationId: getPostById
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/postId'
      responses:
        '200':
          description: '`SUCCESS_OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/post'
        '400':
          description: ClientErrorBadRequest
    patch:
      tags:
        - posts
      summary: Author:규민,매칭글 정보 변경
      description: update post information
      operationId: updatePost
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/postId'
      requestBody:
        description: Post object attributes to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: ObjectId
                  description: references user
                location_id:
                  type: string
                  format: ObjectId
                  description: references location
                post_fitness_part:
                  type: array
                  items:
                    type: string
                    format: Objectid
                    description: references fitness part
                post_title:
                  type: string
                promise_location:
                  type: string
                  format: ObjectId
                  description: references fitness center
                promise_date:
                  type: string
                  format: date
                post_img:
                  type: string
                  default: ''
                post_main_text:
                  type: string
                  default: ''
      responses:
        '200':
          description: '`SUCCESS_OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/post'
        '400':
          description: ClientErrorBadRequest
    delete:
      tags:
        - posts
      summary: postId로 매칭글 삭제
      description: Delete a post by postId
      parameters:
        - $ref: '#/components/parameters/postId'
      responses:
        '200':
          description: '`SUCCESS_OK`'
        '400':
          description: ClientErrorBadRequest
  /v2/posts/image/{postId}:
    post:
      tags:
        - posts
      summary: Author:규민, 매칭글 프로필 이미지 등록
      description: Author:규민,매칭글Iddp  해당하는 매칭글의 사진을 등록/변경합니다. `AWS-s3 URL of image stored`
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/postId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: string
                    format: s3 URL
        '400':
          description: '`ClientErrorBadRequest`'
  /v2/posts/user/{userId}:
    get:
      tags:
        - posts
      summary: Author:기호, 특정 사용자가 쓴 글 조회
      description: Author:기호, 특정 사용자가 쓴 글 조회
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/post'
        '400':
          description: '`ClientErrorBadRequest`'

  /v1/posts:
    get:
      tags:
        - posts
      summary: Author:규민, 모든 매칭글 목록 조회 - Pagination 구현(page=2)
      description: Author:규민,Response  `array of posts written by user`
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/post'
        '400':
          description: '`ClientErrorBadRequest`'
    post:
      tags:
        - posts
      summary: Author:규민,매칭글 등록
      description: Assign a  `post`
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: Post object to be posted
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: ObjectId
                  description: references user
                location_id:
                  type: string
                  format: ObjectId
                  description: references location
                post_fitness_part:
                  type: array
                  items:
                    type: string
                    format: Objectid
                    description: references fitness part
                post_title:
                  type: string
                promise_location:
                  type: object
                  properties:
                    center_name:
                      type: string
                    center_address:
                      type: string
                    center_longitude:
                      type: number
                    center_latitude:
                      type: number
                promise_date:
                  type: string
                  format: date
                post_img:
                  type: string
                  default: ''
                post_main_text:
                  type: string
                  default: ''
      responses:
        '201':
          description: '`SuccessCreated`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/post'
        '400':
          description: '`ClientErrorBadRequest`'
  /v1/posts/{postId}:
    get:
      tags:
        - posts
      summary: Author:규민, postId로 매칭글 조회
      description: Author:규민,Returns a single post
      operationId: getPostById
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/postId'
      responses:
        '200':
          description: '`SUCCESS_OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/post'
        '400':
          description: ClientErrorBadRequest
    patch:
      tags:
        - posts
      summary: Author:규민,매칭글 정보 변경
      description: update post information
      operationId: updatePost
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/postId'
      requestBody:
        description: Post object attributes to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: ObjectId
                  description: references user
                location_id:
                  type: string
                  format: ObjectId
                  description: references location
                post_fitness_part:
                  type: array
                  items:
                    type: string
                    format: Objectid
                    description: references fitness part
                post_title:
                  type: string
                promise_location:
                  type: string
                  format: ObjectId
                  description: references fitness center
                promise_date:
                  type: string
                  format: date
                post_img:
                  type: string
                  default: ''
                post_main_text:
                  type: string
                  default: ''
      responses:
        '200':
          description: '`SUCCESS_OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/post'
        '400':
          description: ClientErrorBadRequest
    delete:
      tags:
        - posts
      summary: postId로 매칭글 삭제
      description: Delete a post by postId
      parameters:
        - $ref: '#/components/parameters/postId'
      responses:
        '200':
          description: '`SUCCESS_OK`'
        '400':
          description: ClientErrorBadRequest
  /v1/posts/image/{postId}:
    post:
      tags:
        - posts
      summary: Author:규민, 매칭글 프로필 이미지 등록
      description: Author:규민,매칭글Iddp  해당하는 매칭글의 사진을 등록/변경합니다. `AWS-s3 URL of image stored`
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/postId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: string
                    format: s3 URL
        '400':
          description: '`ClientErrorBadRequest`'
  /v1/posts/user/{userId}:
    get:
      tags:
        - posts
      summary: Author:기호, 특정 사용자가 쓴 글 조회
      description: Author:기호, 특정 사용자가 쓴 글 조회
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/post'
        '400':
          description: '`ClientErrorBadRequest`'

  /v2/matching/{appointmentId}:
    post:
      tags:
        - matching
      summary: Author:규민, 매칭 여부 확인 및 등록
      description: Author:규민,Check a  `matching` and save result to Appointment
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/appointmentId'
      requestBody:
        description: Appointment User properties to be checked
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_1:
                  type: object
                  properties:
                    user_id:
                      type: string
                      format: ObjectId
                    user_longitutde:
                      type: number
                      description: double in degrees
                    user_latitude:
                      type: number
                      description: double in degrees
                user_2:
                  type: object
                  properties:
                    user_id:
                      type: string
                      format: ObjectId
                    user_longitutde:
                      type: number
                      description: double in degrees
                    user_latitude:
                      type: number
                      description: double in degrees
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/appointment'
        '400':
          description: '`ClientErrorBadRequest`'

  /v1/matching/{appointmentId}:
    post:
      tags:
        - matching
      summary: Author:규민, 매칭 여부 확인 및 등록
      description: Author:규민,Check a  `matching` and save result to Appointment
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/appointmentId'
      requestBody:
        description: Appointment User properties to be checked
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_1:
                  type: object
                  properties:
                    user_id:
                      type: string
                      format: ObjectId
                    user_longitutde:
                      type: number
                      description: double in degrees
                    user_latitude:
                      type: number
                      description: double in degrees
                user_2:
                  type: object
                  properties:
                    user_id:
                      type: string
                      format: ObjectId
                    user_longitutde:
                      type: number
                      description: double in degrees
                    user_latitude:
                      type: number
                      description: double in degrees
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/appointment'
        '400':
          description: '`ClientErrorBadRequest`'

  /v1/reviews/candidates:
    get:
      summary: 'Author:기호, 리뷰 후보 데이터 전체조회'
      description: 'Author:기호,GET 방식으로 리뷰 후보 등록'
      tags:
        - reviews
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: 전체 리뷰 후보 정보
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/reviewCandidate'
                    example:
                      [
                        {
                          '_id': '62c66ef64b8212e4674dbe20',
                          'candidate_body': '매너가 좋아요.',
                          'id': '62c66ef64b8212e4674dbe20',
                        },
                        {
                          '_id': '62c66f0b4b8212e4674dbe21',
                          'candidate_body': '약속을 잘 지켜요.',
                          'id': '62c66f0b4b8212e4674dbe21',
                        },
                        {
                          '_id': '62c66f224b8212e4674dbe22',
                          'candidate_body': '열정적이에요.',
                          'id': '62c66f224b8212e4674dbe22',
                        },
                      ]
    post:
      summary: '리뷰 후보 등록'
      description: 'POST 방식으로 리뷰 후보 등록'
      tags:
        - reviews
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: POST 방식으로 리뷰 후보 등록합니다.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                candidate_body:
                  type: string
                  description: '리뷰 후보'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/reviewCandidate'
        '400':
          description: '`ClientErrorBadRequest`'
  /v1/reviews:
    post:
      summary: 'Author:기호, 사용자 리뷰 등록'
      description: 'Author:기호,Post 방식으로 리뷰 등록'
      tags:
        - reviews
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: POST 방식으로 리뷰를 등록합니다.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                review_recv_id:
                  type: string
                  format: ObjectId
                review_body:
                  type: string
                  default: ''
                user_rating:
                  type: number
                  default: 3
                review_candidates:
                  type: array
                  items:
                    type: string
                    format: ObjectId
                    description: references reviewCandidate
                appointmentId:
                  type: string
      responses:
        '200':
          description: 리뷰 후보 등록
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/review'
        '400':
          description: '`ClientErrorBadRequest`'
  /v1/reviews/{userId}:
    get:
      summary: 'Author:기호특정 사용자가 받은 리뷰를 조회'
      description: 'Author:기호, GET 방식으로 특정 사용자가 받은 리뷰 조회'
      tags:
        - reviews
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: 특정 사용자가 받은 리뷰를 조회
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/review'

  /v1/push/chat/{userId}:
    post:
      summary: 'Author:기호채팅 답변 알림 푸시'
      description: 'Author:기호, Post 방식으로 특정 사용자의 채팅 답변 알림 푸시'
      tags:
        - push
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: '`SuccessOK` 특정 사용자의 채팅 답변 알림 푸시'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: string
                    default: 'title: ~~, body: ~~'
  /v1/push/popup:
    post:
      summary: 'Author:기호,전체 공지 알림 푸시'
      description: 'Author:기호, Post 방식으로 전체 사용자 공지 알림 푸시'
      tags:
        - push
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: 전송할 전체 공지 사항 내용
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notification:
                  type: string
      responses:
        '200':
          description: '`SuccessOK` 전체 사용자의 공지 알림 푸시'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: string
                    default: 'notification: notification, Type: NOTICE'
  /v1/push/test:
    post:
      summary: 'Author:기호, Data 푸시 테스트'
      description: 'Author:기호, Post 방식으로 특정 사용자의 푸시 테스트'
      tags:
        - push
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: 유저 아이디
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: '`SuccessOK` 특정 사용자의 채팅 답변 알림 푸시'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: string
                    default: 'notification: TEST,Type: TEST'

  /v1/locations:
    get:
      summary: 'Author:기호모든 지역 목록 조회'
      description: 'GET 방식으로 모든 지역 목록 조회'
      tags:
        - location
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/location'
        '400':
          description: '`ClientErrorBadRequest`'
  /v1/locations/{locId}:
    get:
      summary: 'Author:기호, 특정 지역 조회'
      description: 'GET 방식으로 특정 지역 조회'
      tags:
        - location
      parameters:
        - $ref: '#/components/parameters/locId'
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/location'
        '400':
          description: '`ClientErrorBadRequest`'

  /v1/fitnesscenters:
    get:
      summary: 'Author:기호, 모든 피트니스 센터 목록 조회'
      description: 'Author:기호, GET 방식으로 모든 피트니스센터 목록 조회'
      tags:
        - fitnesscenter
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/fitnessCenter'
        '400':
          description: '`ClientErrorBadRequest`'
    post:
      summary: '피트니스 센터 등록'
      description: 'POST 방식으로 모든 피트니스센터 목록 조회'
      tags:
        - fitnesscenter
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: fitness center object to be posted
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                center_name:
                  type: string
                center_address:
                  type: string
                center_longitude:
                  type: number
                center_latitude:
                  type: number
      responses:
        '201':
          description: '`SUCCESS Created`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/fitnessCenter'
        '400':
          description: '`ClientErrorBadRequest`'
  /v1/fitnesscenters/{fitnesscenterId}:
    get:
      summary: 'Author:기호,특정 피트니스 센터 정보 조회'
      description: 'Author:기호, GET 방식으로 특정 피트니스 센터 정보 조회'
      tags:
        - fitnesscenter
      parameters:
        - $ref: '#/components/parameters/fitnesscenterId'
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/fitnessCenter'
        '400':
          description: '`ClientErrorBadRequest`'

  /v2/fitnesscenters:
    get:
      summary: 'Author:기호, 특정 조건의 피트니스 센터 조회'
      description: 'Author:기호, GET 방식으로 특정 조건의 피트니스센터 목록 조회'
      tags:
        - fitnesscenter
      parameters:
        - $ref: '#/components/parameters/authToken'
        - name: page
          in: query
          description: page to get
          schema:
            type: number
            format: integer
        - name: limit
          in: query
          description: 한 페이지에 가져올 피트니스 센터 개수(default=10)
          schema:
            type: number
            format: integer
        - name: first_longitude
          in: query
          description: minimum longitude
          schema:
            type: number
            format: double
        - name: first_latitude
          in: query
          description: minimum latitude
          schema:
            type: number
            format: double
        - name: second_longitude
          in: query
          description: maximum longitude
          schema:
            type: number
            format: double
        - name: second_latitude
          in: query
          description: maximum latitude
          schema:
            type: number
            format: double
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          $ref: '#/components/schemas/fitnessCenter'
                      totalDocs:
                        type: number
                      limit:
                        type: number
                      page:
                        type: number
                      totalPages:
                        type: number
                      pagingCounter:
                        type: number
                      hasPrevPage:
                        type: number
                      hasNextPage:
                        type: number
                      prevPage:
                        type: number
                      nextPage:
                        type: number
                      userCount:
                        type: array
                        items:
                          $ref: '#/components/schemas/userCount'
        '400':
          description: '`ClientErrorBadRequest`'
    post:
      summary: '피트니스 센터 등록'
      description: 'POST 방식으로 모든 피트니스센터 목록 조회'
      tags:
        - fitnesscenter
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: fitness center object to be posted
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                center_name:
                  type: string
                center_address:
                  type: string
                center_longitude:
                  type: number
                center_latitude:
                  type: number
      responses:
        '201':
          description: '`SUCCESS Created`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/fitnessCenter'
        '400':
          description: '`ClientErrorBadRequest`'
  /v2/fitnesscenters/{fitnesscenterId}:
    get:
      summary: 'Author:기호,특정 피트니스 센터 정보 조회'
      description: 'Author:기호, GET 방식으로 특정 피트니스 센터 정보 조회'
      tags:
        - fitnesscenter
      parameters:
        - $ref: '#/components/parameters/fitnesscenterId'
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/fitnessCenter'
        '400':
          description: '`ClientErrorBadRequest`'
  /v2/fitnesscenters/search:
    get:
      summary: 'Author:기호,특정 키워드로 피트니스 센터 검색'
      description: 'Author:기호, GET 방식으로 특정 키워드로 피트니스 센터 검색'
      tags:
        - fitnesscenter
      parameters:
        - $ref: '#/components/parameters/authToken'
        - name: keyWord
          in: query
          description: Keyword to Search
          schema:
            type: string
            format: string
        - name: page
          in: query
          description: page to get
          schema:
            type: number
            format: integer
        - name: limit
          in: query
          description: 한 페이지에 가져올 피트니스 센터 개수(default=10)
          schema:
            type: number
            format: integer
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          type: object
                          $ref: '#/components/schemas/fitnessCenter'
                      totalDocs:
                        type: number
                        format: integer
                      limit:
                        type: number
                        format: integer
                      page:
                        type: number
                        format: integer
                      totalPages:
                        type: number
                        format: integer
                      pagingCounter:
                        type: number
                        format: integer
                      hasPrevPage:
                        type: number
                        format: integer
                      hasNextPage:
                        type: number
                        format: integer
                      prevPage:
                        type: number
                        format: integer
                      nextPage:
                        type: number
                        format: integer
        '400':
          description: '`ClientErrorBadRequest`'

  /v1/fitnesspart:
    get:
      tags:
        - fitnesspart
      summary: Author:기호,모든 운동부위 목록 조회
      description: Author:기호, Response  `array of fitnessparts written by user`
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/fitnessPart'
        '400':
          description: '`ClientErrorBadRequest`'

  /v1/appointments:
    get:
      summary: 'Author:기호,사용자와 관련된 약속 데이터 전체조회'
      description: 'Author:기호, Get 방식으로 사용자와 관련된 모든 약속 조회'
      tags:
        - appointments
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: 전체 약속 정보
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/appointment'
        '400':
          description: '`ClientErrorBadRequest`'
    post:
      summary: '사용자 약속 등록'
      description: 'Post 방식으로 특정 약속 등록'
      tags:
        - appointments
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: POST 방식으로 약속을 등록합니다.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fitness_center:
                  type: object
                  properties:
                    center_name:
                      type: string
                    center_address:
                      type: string
                    center_longitude:
                      type: number
                    center_latitude:
                      type: number
                appointment_date:
                  type: string
                  format: date
                match_start_id:
                  type: string
                  format: ObjectId
                  description: references User
                match_join_id:
                  type: string
                  format: ObjectId
                  description: references User
      responses:
        '201':
          description: '`SuccessCreated`특정 약속 정보'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/appointment'
        '404':
          description: '`ClientErrorNotFound`'
  /v1/appointments/{appointmentId}:
    get:
      summary: 'Author:기호,특정 약속 데이터 조회'
      description: 'Author:기호, Get 방식으로 특정 약속 조회'
      tags:
        - appointments
      parameters:
        - $ref: '#/components/parameters/appointmentId'
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: 특정 약속 정보
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: object
                    $ref: '#/components/schemas/appointment'
        '404':
          description: '`ClientErrorNotFound`'

  /v1/chats:
    get:
      summary: 'Author:규민, 사용자와 관련된 채팅목록 전체조회'
      description: 'Get 방식으로 사용자와 관련된 모든 약속 조회'
      tags:
        - chats
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: 활성화된 전체 채팅방 정보
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/chatroom'
        '400':
          description: '`ClientErrorBadRequest`'
    post:
      summary: '채팅방 생성'
      description: 'Post 방식으로 토큰 소유자와 상대방의 채팅방 생성'
      tags:
        - chats
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: POST 방식으로 채팅방을 생성합니다.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_join_id:
                  type: string
                  format: ObjectId
                  description: references User
      responses:
        '201':
          description: '`SuccessCreated`특정 약속 정보'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/chatroom'
        '400':
          description: '`ClientErrorBadRequest`'
  /v1/chats/{chatroomId}:
    get:
      summary: 'Author:규민, 특정 채팅방 조회'
      description: 'Get 방식으로 특정 채팅방 조회'
      tags:
        - chats
      parameters:
        - $ref: '#/components/parameters/chatroomId'
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: 특정 약속 정보
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: object
                    $ref: '#/components/schemas/chatroom'
        '400':
          description: '`ClientErrorBadRequest`'
    delete:
      summary: '특정 채팅방 삭제'
      description: 'Delete 방식으로 특정 채팅방 삭제'
      tags:
        - chats
      parameters:
        - $ref: '#/components/parameters/chatroomId'
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: 특정 약속 정보
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: object
                    $ref: '#/components/schemas/chatroom'
        '400':
          description: '`ClientErrorBadRequest`'

  /v1/chats/info:
    get:
      summary: 'Author:규민, 사용자와 관련된 채팅목록 사용자 상세정보 포함 전체조회'
      description: 'Get 방식으로 사용자와 관련된 모든 약속 조회'
      tags:
        - chats
      parameters:
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: 활성화된 전체 채팅방 정보
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/chatroom'
        '400':
          description: '`ClientErrorBadRequest`'
  /v1/chats/info/{chatroomId}:
    get:
      summary: 'Author:규민, 특정 채팅방 사용자 상세정보 포함 조회'
      description: 'Get 방식으로 특정 채팅방 조회'
      tags:
        - chats
      parameters:
        - $ref: '#/components/parameters/chatroomId'
        - $ref: '#/components/parameters/authToken'
      responses:
        '200':
          description: 특정 약속 정보
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: object
                    $ref: '#/components/schemas/chatroom'
        '400':
          description: '`ClientErrorBadRequest`'

  /v1/report/{postId}:
    post:
      summary: 'Author:기호, 모집글 신고'
      description: 'Author:기호, Post 방식으로 특정 모집글 신고, PostId를 통해 모집글 신고, request body 없음'
      tags:
        - report
      parameters:
        - $ref: '#/components/parameters/authToken'
        - $ref: '#/components/parameters/postId'
      requestBody:
        description: POST 방식으로 모집글을 신고합니다.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
      responses:
        '201':
          description: '`SuccessCreated` 모집글 신고 완료'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/reportedPost'
        '404':
          description: '`ClientErrorNotFound`'
  /v1/report/user:
    post:
      summary: 'Author:기호, 사용자 신고'
      description: 'Author:기호,Post 방식으로 사용자를 신고합니다.'
      tags:
        - report
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: POST 방식으로 사용자를 신고합니다.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reportedUserId:
                  type: string
                  format: ObjectId
                  description: 신고 당한 User
                reported_content:
                  type: string
                  format: String
                  description: 신고 내용
      responses:
        '201':
          description: '`SuccessCreated` 사용자 신고 등록 완료'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/reportedUser'
        '404':
          description: '`ClientErrorNotFound`'
  /v1/report/users:
    get:
      summary: 'Author:기호, 신고된 사용자 내역 조회'
      description: 'Author:기호, GET 방식으로 모든 사용자를 신고 내역 조회합니다.'
      tags:
        - report
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: GET 방식으로 모든 사용자를 신고 내역 조회합니다
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
      responses:
        '201':
          description: '`SuccessCreated` 사용자 신고 등록 완료, 결과는 리스트 형태'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/reportedUser'
        '404':
          description: '`ClientErrorNotFound`'
  /v1/report/posts:
    get:
      summary: 'Author:기호, 신고된 모집글 내역 조회'
      description: 'Author:기호, GET 방식으로 모든 신고된 모집글 내역 조회합니다.'
      tags:
        - report
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: GET 방식으로 모든 모집글 신고 내역 조회합니다
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
      responses:
        '201':
          description: '`SuccessCreated` 사용자 신고 등록 완료, 결과는 리스트 형태'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/reportedPost'
        '404':
          description: '`ClientErrorNotFound`'

  /v1/trace:
    post:
      summary: 'Author:규민, 사용자 위치 정보'
      description: 'Author:규민, POST 방식으로 특정 사용자 위치 정보 등록'
      tags:
        - matching
      parameters:
        - $ref: '#/components/parameters/authToken'
      requestBody:
        description: POST 방식으로 특정 사용자 정보 등록
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_longitude:
                  type: number
                  format: double
                  description: 사용자 경도
                user_latitude:
                  type: number
                  format: double
                  description: 사용자 위도
      responses:
        '201':
          description: '`SuccessCreated` 사용자 위치 정보 등록 완료'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/userTrace'
        '404':
          description: '`ClientErrorNotFound`'

  /v2/banner:
    get:
      summary: 'Author:기호, 배너 정보 조회'
      description: 'Author:기호, GET 방식으로 배너 정보 조회'
      tags:
        - banner
      responses:
        '201':
          description: '`SuccessCreated` 사용자 위치 정보 등록 완료'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/banner'
        '404':
          description: '`ClientErrorNotFound`'
    post:
      summary: 'Author:기호, 배너 정보 등록(생성)'
      description: 'Author:기호, POST 방식으로 배너 정보 조회'
      tags:
        - banner
      requestBody:
        description: POST 방식으로 배너 정보 등록
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connect_url:
                  type: string
                  format: double
                  description: 배너 클릭 이동 url
                fitness_center_id:
                  type: string
                  format: double
                  description: 피트니스 센터
                expire_date:
                  type: string
                  format: date
      responses:
        '201':
          description: '`SuccessCreated` 사용자 위치 정보 등록 완료'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/banner'
        '404':
          description: '`ClientErrorNotFound`'
  /v2/banner/image/{bannerId}:
    post:
      tags:
        - banner
      summary: Author:기호, 배너 이미지 등록
      description: Author:기호, 배너의 사진을 등록/변경합니다. `AWS-s3 URL of image stored`
      # parameters:
      #   - $ref: '#/components/parameters/authToken'
      #   - $ref: '#/components/parameters/postId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: string
                    format: s3 URL
        '400':
          description: '`ClientErrorBadRequest`'
  /v2/banner/clicked/{bannerId}:
    post:
      tags:
        - banner
      summary: Author:기호, 배너 이미지 클릭 시 클릭 수 증가
      description: Author:기호, 배너의 사진의 클릭 수를 증가합니다.
      parameters:
        - $ref: '#/components/parameters/bannerId'
      responses:
        '200':
          description: '`SuccessCreated` 배너 클릭 수 증가'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/banner'
        '404':
          description: '`ClientErrorNotFound`'

  /v2/visitor/posts:
    get:
      summary: 'Author:기호, 로그인 없이 둘러보기 모집글'
      description: 'Author:기호, GET 방식으로 로그인 없이 둘러보기 모집글 조회'
      tags:
        - visitor
      responses:
        '201':
          description: '`SuccessCreated` 사용자 위치 정보 등록 완료'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    $ref: '#/components/schemas/banner'
        '404':
          description: '`ClientErrorNotFound`'
  /v2/visitor/fitnesscenter:
    get:
      tags:
        - visitor
      summary: Author:기호, 로그인 없이 둘어보기 피트니스 센터
      description: Author:기호, 로그인 없이 둘어보기 피트니스 센터를 조회합니다.
      # parameters:
      #   - $ref: '#/components/parameters/authToken'
      #   - $ref: '#/components/parameters/postId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: '`SUCCESS OK`'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  refresh:
                    type: string
                  data:
                    type: string
                    format: s3 URL
        '400':
          description: '`ClientErrorBadRequest`'
